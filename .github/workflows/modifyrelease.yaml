# Create or Update a release PR every push to main
name: Schedule Releases

# update on changes to main
on:
  pull_request:
  issue_comment:
    types: [created]

permissions: 
  contents: write
  pull-requests: write
  repository-projects: write

jobs:
  allowed_member:
    runs-on: ubuntu-latest
    outputs:
      IS_MEMBER: ${{ steps.teamAffiliation.outputs.isTeamMember }}
    steps:
      - name: Check user for team affiliation
        uses: tspascoal/get-user-teams-membership@v2
        id: teamAffiliation
        with:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          username: ${{ github.actor }}
          team: maas-engineering
    
  change_version:
    needs: allowed_member
    if: startsWith(github.event.pull_request.title, 'Release v') && startsWith(github.event.comment.body, 'Version') && needs.allowed_member.outputs.IS_MEMBER == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
        
      # Create the next version name by the next patch semver
      - name: "Get previous release version"
        uses: reecetech/version-increment@2023.9.3
        id: version-lookup
        with:
          scheme: semver
          increment: patch

      - name: "Get new version"
        id: version
        run: |
          version=$(${{ github.event.comment.body }} | grep -oP '\d+\.\d+\.\d+' | head -1)
          echo "VERSION=${version}" >> $GITHUB_OUTPUT
      - name: "Get existing version"
        id: current
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          version=$(${{ github.event.pull_request.title }} | grep -oP '\d+\.\d+\.\d+' | head -1)
          echo "VERSION=${version}" >> $GITHUB_OUTPUT

      # determine the changelog
      - name: "Generate release changelog"
        id: release-changelog
        uses: heinrichreimer/action-github-changelog-generator@v2.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          output: tmp_changes.md
          sinceTag: ${{ steps.version-lookup.outputs.CURRENT_VERSION }}
          futureRelease: ${{ steps.version.outputs.VERSION }}
          excludeTagsRegex: ".*"
          stripGeneratorNotice: true

      # read changes
      - name: "Read Changelog"
        id: changes
        uses: juliangruber/read-file-action@v1
        with:
          path: tmp_changes.md
      - run: rm -f tmp_changes.md

      # check if the changelog matches automation
      - name: "Changelog updated"
        id: changelog-updated
        run: |
          echo "${{ github.event.pull_request.body }}" >> body
          sed -i 's/${{ steps.version-lookup.outputs.VERSION }}/${{ steps.current.outputs.VERSION }}/g' body
          body=$(cat body)
          if [ "$body" = "${{ steps.changes.outputs.content }}" ]; then
            echo "CHANGED=false" >> $GITHUB_OUTPUT
          else
            echo "CHANGED=true" >> $GITHUB_OUTPUT
          fi
          echo "BODY=${body}" >> $GITHUB_OUTPUT
      - run: echo ${{ steps.changelog-updated.outputs.CHANGED }}
      - run: git checkout ${{ github.event.pull_request.base.ref }} -- CHANGELOG.md

      # autogenerate
      - name: "Generate full changelog (Automatic)"
        if: ${{ ! steps.changelog-updated.outputs.CHANGED }}
        uses: heinrichreimer/action-github-changelog-generator@v2.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          base: CHANGELOG.md
          sinceTag: ${{ steps.version-lookup.outputs.CURRENT_VERSION }}
          futureRelease: ${{ steps.version.outputs.VERSION }}
          excludeTagsRegex: ".*"

      # manual
      - name: "Generate full changelog (Manual)"
        if: ${{ steps.changelog-updated.outputs.CHANGED }}
        run: |
          cat ${{ github.event.pull_request.body }} >> tmp_changelog.md
          sed -i 's/${{ steps.current.outputs.VERSION }}/${{ steps.version.outputs.VERSION }}/g' tmp_changelog
          cat CHANGELOG.md >> tmp_changelog.md
          mv -r tmp_changelog.md CHANGELOG.md

      # create or update the release changelog
      - uses: gr2m/create-or-update-pull-request-action@v1
        if: ${{ ! steps.changelog-updated.outputs.CHANGED }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          title: Release v${{ steps.version.outputs.VERSION }}
          body: ${{ steps.changes.outputs.content }}
          branch: release/latest
          commit-message: Update changelog for v${{ steps.version.outputs.VERSION }}
          update-pull-request-title-and-body: true
      - uses: gr2m/create-or-update-pull-request-action@v1
        if: ${{ steps.changelog-updated.outputs.CHANGED }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          title: Release v${{ steps.version.outputs.VERSION }}
          body: ${{ github.event.pull_request.body }}
          branch: release/latest
          commit-message: Update changelog for v${{ steps.version.outputs.VERSION }}
          update-pull-request-title-and-body: true

      - run: rm -f $GITHUB_OUTPUT
